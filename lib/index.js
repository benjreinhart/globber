// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var fs, getGlobPath, glob, globber, isFile, isGlob, partition, partitionOptions, Path, validGlobberOptions;
  fs = require('fs');
  glob = require('glob');
  Path = require('path');
  partition = require('minutils').partition;
  validGlobberOptions = [
    'absolute',
    'extension',
    'recursive',
    'includeDirectories'
  ];
  module.exports = globber = function (basePath, options, cb) {
    var cache$, globOptions;
    if ('function' === typeof options) {
      cb = options;
      options = {};
    }
    cache$ = partitionOptions(options);
    options = cache$[0];
    globOptions = cache$[1];
    if (options.absolute === true)
      basePath = Path.resolve(basePath);
    globber.glob(getGlobPath(basePath, options), globOptions, function (err, paths) {
      if (null != err)
        return cb(err);
      if (options.includeDirectories === false)
        paths = paths.filter(isFile);
      return cb(null, paths);
    });
  };
  globber.glob = glob;
  globber.sync = function (basePath, options) {
    var cache$, globOptions, paths;
    if (null == options)
      options = {};
    cache$ = partitionOptions(options);
    options = cache$[0];
    globOptions = cache$[1];
    if (options.absolute === true)
      basePath = Path.resolve(basePath);
    paths = globber.glob.sync(getGlobPath(basePath, options), globOptions);
    if (options.includeDirectories === false)
      paths = paths.filter(isFile);
    return paths;
  };
  getGlobPath = function (basePath, options) {
    var cache$, extension, fuzz, path, recursive;
    if (isGlob(basePath))
      return basePath;
    cache$ = options;
    extension = cache$.extension;
    recursive = cache$.recursive;
    fuzz = recursive !== false ? '**/*' : '*';
    path = '' + basePath + '/' + fuzz;
    if (null != extension)
      path += '.' + extension;
    return Path.normalize(path);
  };
  partitionOptions = function (options) {
    return partition(options, function (_, key) {
      return in$(key, validGlobberOptions);
    });
  };
  isGlob = function (str) {
    return str.indexOf('*') !== -1;
  };
  isFile = function (path) {
    return fs.statSync(path).isFile();
  };
  function in$(member, list) {
    for (var i = 0, length = list.length; i < length; ++i)
      if (i in list && list[i] === member)
        return true;
    return false;
  }
}.call(this);
