// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, buildTasks, globPath, isFile, utils;
  utils = require('./utils');
  async = require('async');
  module.exports = function (paths, options, callback) {
    var iterator;
    if ('function' === typeof options) {
      callback = options;
      options = {};
    }
    if (utils.isString(paths))
      return globPath(paths, options, callback);
    iterator = function (accum, path, cb) {
      return globPath(path, options, function (err, paths) {
        if (null != err)
          return cb(err);
        return cb(null, accum.concat(paths));
      });
    };
    async.reduce(paths, [], iterator, callback);
  };
  globPath = function (path, options, cb) {
    var pattern;
    pattern = utils.getGlobPattern(path, options);
    utils.glob(pattern, options, function (err, paths) {
      var tasks;
      if (null != err)
        return cb(err);
      tasks = buildTasks(paths, options);
      if (!tasks.length) {
        return cb(null, paths);
      } else {
        return async.waterfall(tasks, function (err, paths) {
          if (null != err) {
            return cb(err);
          } else {
            return cb(null, paths);
          }
        });
      }
    });
  };
  buildTasks = function (paths, options) {
    var excludedPaths, removeDirectories, tasks;
    tasks = [];
    if (null != (excludedPaths = options.exclude))
      tasks.push(function (cb) {
        return cb(null, utils.rejectPaths(paths, excludedPaths));
      });
    if (options.includeDirectories === false) {
      removeDirectories = function (paths, cb) {
        return async.filter(paths, isFile, function (files) {
          return cb(null, files);
        });
      };
      if (!tasks.length)
        removeDirectories = removeDirectories.bind(null, paths);
      tasks.push(removeDirectories);
    }
    return tasks;
  };
  isFile = function (path, cb) {
    return utils.isFile(path, function (err, file) {
      if (null != err)
        throw err;
      return cb(file);
    });
  };
}.call(this);
